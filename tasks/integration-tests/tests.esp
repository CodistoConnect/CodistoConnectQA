Server.Include('qunit/qunit-1.9.0.js');
Server.Include('qunit/junitlogger.js');

var ReportSummary = {
	failed: 0,
	passed: 0,
	total: 0,
	time: 0,
};

var ReportedSuites = {};
var ReportContents = "";

QUnit.log( function( details ) {

	if("source" in details) {

		var CallStack = details.source.split("\n");
		var CallRef = CallStack[0].split("@")[1];

		if(!(details.testname in QUnit.AssertSource)) {
			//No sources registered for this test yet
			QUnit.AssertSource[details.testname] = [CallRef];
		} else {
			//Another assert failure. Register the first line of callstack
			QUnit.AssertSource[details.testname].push(CallRef);
		}
	}
});


QUnit.jUnitReport = function(report) {

	ReportSummary = report.results;

	//Strip off the XML version etc as e4x XML constructor doesn't like that
	var ReportLines = report.xml.split("\n");
	ReportLines.shift();
	var XmlObj = new XML(ReportLines.join());

	for each(var TestSuite in XmlObj.testsuite) {

		var TestSuiteName = TestSuite.@name;

		for each(var TestCase in TestSuite.testcase) {

			var ReportErrors = [];
			var TestCaseName = TestCase.@name;
			var TestCaseTime = TestCase.@time;

			if(TestCase.failure.length() > 0 ) {

				if(!(TestSuiteName in ReportedSuites)) {
					ReportErrors.push("\n\nErrors found in test suite (" + TestSuiteName + ")\n\n");
					ReportedSuites[TestSuiteName] = true;
				}

				var FailureIdx = 0;
				for each(var Failure in TestCase.failure) {

					var FailureMessage = "";
					if(Failure.@message.toString() != "undefined") {
						FailureMessage = Failure.@message;
					}

					if(TestCaseName in QUnit.AssertSource) {

						var TestRef = QUnit.AssertSource[TestCaseName][FailureIdx++];
						FailureMessage	+= " [Test Reference - " + TestRef + "]";
					}

					ReportErrors.push("Test failed (" + TestCaseName + ") - " + FailureMessage + "\n");
				};
			}
		}
	};
	ReportContents += ReportErrors.join("") ;
};

QUnit.jUnitReportSend = function(report, isSlack) {

	var SlackRoomToken = Application.SLACKROOMTOKEN;

	if("CLI" in Application && Application["CLI"]) {

		//restore STDOUT response writing
		Response.Write = PlaceholderResponseWrite;
		Response.Write("\n\n");
		Response.Write(ReportContents);
		Response.Write(JSON.stringify(ReportSummary));
		Response.Write("\n\n");
	}

	if(!isSlack) {
		return;
	}

	var SlackMessage;

	if(ReportSummary.failed > 0) {

		SlackMessage =  {
			"room_token" : SlackRoomToken,
			"request" :
			{
				"username": "CodistoConnect",
				"attachments":
				[
					{
						"fallback": "Summary - " + JSON.stringify(ReportSummary),
						"pretext": "<!everyone> qa.codisto.com - Integration tests FAILED !! FIX THEM",
						"color":"danger",
						"fields":
						[
							{
								"title":"Summary of integration tests " + JSON.stringify(ReportSummary),
								"value": "\n" + ReportContents,
								"short":false
							}
						]
					}
				]
			}
		};

	} else {

		SlackMessage =	{
			"room_token" : SlackRoomToken,
			"request" :
			{
				"username": "CodistoConnect",
				"attachments":
				[
					{
						"fallback": "Summary - " + JSON.stringify(ReportSummary),
						"pretext": "qa.codisto.com - Integration tests PASSED",
						"color":"#62CF6F",
						"fields":
						[
							{
								"title":"Summary of integration tests " + JSON.stringify(ReportSummary),
								"value": "Integration tests passed, carry on",
								"short":false
							}
						]
					}
				]
			}
		};
	}

	Server.ExecuteAsyncNoReturn("/include/slack.esp", "", SlackMessage);
};

var listing = Dir.Listing(".");
var PlaceholderResponseWrite = Response.Write;

QUnit.AssertSource = {};

//Suppress any output while tests are running
Response.Write = function(str){ return; };

Debug.LogInfo("Tests started");

for(var i = 0, len = listing.length; i < len; i++)
{
	var elem = listing[i];
	if(!elem.Directory && /^test_[a-z0-9]+\.esp$/i.test(elem.Name))
	{
	Server.Include(elem.Path);
	}
}

Debug.LogInfo("Tests finished");

QUnit.jUnitReportSend(ReportSummary, true);
