QUnit.module('Plugin');

//Internal test to make sure FCGI is working correctly
QUnit.test('PluginBuiltFCGIProto', function(assert){

	var Branch = "master";
	var ResellerKey = 'n/a';
	var SHA1 = 'n/a';
	var GithubAccessToken = Application.GITHUB_ACCESS_TOKEN;

	var FCGIURL = "fastcgi://127.0.0.1:6971/pluginbuild/manual?branch=" + Branch + "&stashpop=1&sha1=" + SHA1 + "&RESELLERKEY=" + ResellerKey + "&GITHUBTOKEN=" + GithubAccessToken + "&TEST=1&download=1";

	var FCGIReq = new FastCGIClient();
	FCGIReq.Open("POST", FCGIURL);
	FCGIReq.Send();

	Status = FCGIReq.Status;
	assert.equal(200, Status, "Plugin build fastcgi status was " + Status);

	assert.ok(FCGIReq.ResponseBody.length > 0, " ResponseBody length was 0");

	var ResponseBody = FCGIReq.ResponseBody.split("\n");
	var PluginDetails = ResponseBody[ResponseBody.length - 2].split("~~");
	var PluginVersion = PluginDetails[0];
	var PluginPath = PluginDetails[1];

	assert.notEqual(PluginVersion, NaN, "Plugin version was NaN");
	assert.notEqual(PluginPath, NaN, "Resulting plugin path was NaN");

	var ValidVersion = /(\d.){2}\d+$/.test(PluginVersion);
	assert.ok(ValidVersion, "Version was not in expected n.n.n.n format - was " + PluginVersion);

});

//Download plugin via HTTP and confirm everything is OK
QUnit.test('PluginInstall', function(assert){

	var h = new HttpClient();
	h.Open("GET", "http://qa.codisto.com/plugin/build/manual?branch=master&download=1");
	h.SetRequestHeader("X-Codisto-Build", "1");
	h.Send();

	assert.ok(h.Status == 200);

	//check plugin size is OK
	var MinSize = 20 * 1024;
	var MaxSize = 50 * 1024;
	var ActualSize = h.ResponseBody.length;

	assert.ok(ActualSize >= MinSize && ActualSize <= MaxSize , "Plugin size should be between " + MinSize + " bytes and " + MaxSize + " bytes , was " + ActualSize + " bytes");

});

QUnit.test('PluginResellerInstall', function(assert){

	var h = new HttpClient();
	var ResellerKey = "123abc";
	h.Open("GET", "http://qa.codisto.com/plugin/build/manual?branch=master&resellerkey=" + encodeURIComponent(ResellerKey) + "&download=1");
	h.SetRequestHeader("X-Codisto-Build", "1");
	h.Send();

	assert.ok(h.Status == 200);

	//check plugin size is OK
	var MinSize = 20 * 1024;
	var MaxSize = 50 * 1024;
	var ActualSize = h.ResponseBody.length;

	assert.ok(ActualSize >= MinSize && ActualSize <= MaxSize , "Plugin size should be between " + MinSize + " bytes and " + MaxSize + " bytes , was " + ActualSize + " bytes");


});
